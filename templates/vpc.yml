AWSTemplateFormatVersion: '2010-09-09'
Description: '01.Cloud9++ - VPC Template'

Mappings:
  EnableAZ:
    ap-northeast-1:
      "A": "true"
      "B": "true"
      "C": "true"
      "D": "false"
      "E": "false"
      "F": "false"
      "G": "false"
    ap-northeast-2:
      "A": "true"
      "B": "true"
      "C": "false"
      "D": "false"
      "E": "false"
      "F": "false"
      "G": "false"
    ap-south-1:
      "A": "true"
      "B": "true"
      "C": "false"
      "D": "false"
      "E": "false"
      "F": "false"
      "G": "false"
    ap-southeast-1:
      "A": "true"
      "B": "true"
      "C": "true"
      "D": "false"
      "E": "false"
      "F": "false"
      "G": "false"
    ap-southeast-2:
      "A": "true"
      "B": "true"
      "C": "true"
      "D": "false"
      "E": "false"
      "F": "false"
      "G": "false"
    ca-central-1:
      "A": "true"
      "B": "true"
      "C": "false"
      "D": "false"
      "E": "false"
      "F": "false"
      "G": "false"
    eu-central-1:
      "A": "true"
      "B": "true"
      "C": "true"
      "D": "false"
      "E": "false"
      "F": "false"
      "G": "false"
    eu-west-1:
      "A": "true"
      "B": "true"
      "C": "true"
      "D": "false"
      "E": "false"
      "F": "false"
      "G": "false"
    eu-west-2:
      "A": "true"
      "B": "true"
      "C": "true"
      "D": "false"
      "E": "false"
      "F": "false"
      "G": "false"
    eu-west-3:
      "A": "true"
      "B": "true"
      "C": "true"
      "D": "false"
      "E": "false"
      "F": "false"
      "G": "false"
    sa-east-1:
      "A": "true"
      "B": "true"
      "C": "false"
      "D": "false"
      "E": "false"
      "F": "false"
      "G": "false"
    us-east-1:
      "A": "true"
      "B": "true"
      "C": "true"
      "D": "true"
      "E": "true"
      "F": "true"
      "G": "false"
    us-east-2:
      "A": "true"
      "B": "true"
      "C": "true"
      "D": "false"
      "E": "false"
      "F": "false"
      "G": "false"
    us-west-1:
      "A": "true"
      "B": "true"
      "C": "false"
      "D": "false"
      "E": "false"
      "F": "false"
      "G": "false"
    us-west-2:
      "A": "true"
      "B": "true"
      "C": "true"
      "D": "false"
      "E": "false"
      "F": "false"
      "G": "false"

Conditions:
  ConfigureIPv6: !Equals [!Ref 'EnableIPv6', true]
  EnableSubnetA: !Equals [!FindInMap [ EnableAZ, !Ref "AWS::Region", "A" ], true]
  EnableSubnetB: !Equals [!FindInMap [ EnableAZ, !Ref "AWS::Region", "B" ], true]
  EnableSubnetC: !Equals [!FindInMap [ EnableAZ, !Ref "AWS::Region", "C" ], true]
  EnableSubnetD: !Equals [!FindInMap [ EnableAZ, !Ref "AWS::Region", "D" ], true]
  EnableSubnetE: !Equals [!FindInMap [ EnableAZ, !Ref "AWS::Region", "E" ], true]
  EnableSubnetF: !Equals [!FindInMap [ EnableAZ, !Ref "AWS::Region", "F" ], true]
  EnableSubnetG: !Equals [!FindInMap [ EnableAZ, !Ref "AWS::Region", "G" ], true]

Parameters:
  Tag:
    Description: name used to identified Vulcan values. defaults to
    Type: String
    Default: Vulcan
    MaxLength: 16
    MinLength: 4
  S3TemplateBucket:
    Type: String
  CidrVPC:
    Description: 'Cidr for the VPC'
    Type: String
    Default: 10.0.0.0/16

  CidrPublicSubnetA:
    Description: 'Cidr for Public Subnet A'
    Type: String
    Default: 10.0.0.0/20
  CidrPrivateSubnetA:
    Description: 'Cidr for Private Subnet A'
    Type: String
    Default: 10.0.16.0/20

  CidrPublicSubnetB:
    Description: 'Cidr for Public Subnet B'
    Type: String
    Default: 10.0.32.0/20
  CidrPrivateSubnetB:
    Description: 'Cidr for Private Subnet B'
    Type: String
    Default: 10.0.48.0/20

  CidrPublicSubnetC:
    Description: 'Cidr for Public Subnet C'
    Type: String
    Default: 10.0.64.0/20
  CidrPrivateSubnetC:
    Description: 'Cidr for Private Subnet C'
    Type: String
    Default: 10.0.80.0/20

  CidrPublicSubnetD:
    Description: 'Cidr for Public Subnet D'
    Type: String
    Default: 10.0.96.0/20
  CidrPrivateSubnetD:
    Description: 'Cidr for Private Subnet D'
    Type: String
    Default: 10.0.112.0/20

  CidrPublicSubnetE:
    Description: 'Cidr for Public Subnet E'
    Type: String
    Default: 10.0.128.0/20
  CidrPrivateSubnetE:
    Description: 'Cidr for Private Subnet E'
    Type: String
    Default: 10.0.144.0/20

  CidrPublicSubnetF:
    Description: 'Cidr for Public Subnet F'
    Type: String
    Default: 10.0.160.0/20
  CidrPrivateSubnetF:
    Description: 'Cidr for Private Subnet F'
    Type: String
    Default: 10.0.176.0/20

  CidrPublicSubnetG:
    Description: 'Cidr for Public Subnet G'
    Type: String
    Default: 10.0.192.0/20
  CidrPrivateSubnetG:
    Description: 'Cidr for Private Subnet G'
    Type: String
    Default: 10.0.208.0/20

  EnableIPv6:
    Description: Enable IPv6 on the  VPC
    Type: String
    Default: false
    AllowedValues:
    - false
    - true

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'CidrVPC'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Ref 'Tag'
  VPCv6:
    Condition: ConfigureIPv6
    Type: AWS::EC2::VPCCidrBlock
    DependsOn: VPC
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref 'VPC'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref 'Tag'
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
      - Key: Name
        Value: !Sub '${Tag} Public'
  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
      - Key: Name
        Value: !Sub '${Tag} Private'
  RouteTablePublicInternetRouteIPv6:
    Condition: ConfigureIPv6
    Type: AWS::EC2::Route
    DependsOn:
    - VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref 'RouteTablePublic'
      DestinationIpv6CidrBlock: ::/0
      GatewayId: !Ref 'InternetGateway'

  RouteTablePublicInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref 'RouteTablePublic'
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'InternetGateway'
  NetworkAclPublic:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
      - Key: Name
        Value: !Sub '${Tag} Public'
  NetworkAclPrivate:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
      - Key: Name
        Value: !Sub '${Tag} Private'
  NetworkAclEntryInPublicAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAclPublic'
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
  NetworkAclEntryOutPublicAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAclPublic'
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
  NetworkAclEntryInPrivateAllowVPC:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAclPrivate'
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
  NetworkAclEntryOutPrivateAllowVPC:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAclPrivate'
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
  NetworkAclEntryInPublicAllowAllIPv6:
    Type: AWS::EC2::NetworkAclEntry
    Condition: ConfigureIPv6
    Properties:
      NetworkAclId: !Ref 'NetworkAclPublic'
      RuleNumber: 98
      Protocol: -1
      RuleAction: allow
      Egress: false
      Ipv6CidrBlock: ::/0
  NetworkAclEntryOutPublicAllowAllIPv6:
    Type: AWS::EC2::NetworkAclEntry
    Condition: ConfigureIPv6
    Properties:
      NetworkAclId: !Ref 'NetworkAclPublic'
      RuleNumber: 98
      Protocol: -1
      RuleAction: allow
      Egress: true
      Ipv6CidrBlock: ::/0

  # Creates subnet, routetable and network acl
  SubnetA:
    Condition: EnableSubnetA
    DependsOn: VPC
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        AZ: "A"
        CidrPublicIpv6: "01"
        Tag: !Ref Tag
        VPC: !Ref VPC
        VPCIpv6CidrBlocks:
          Fn::If:
            - ConfigureIPv6
            - !Select [0, !GetAtt [ VPC, Ipv6CidrBlocks ] ]
            - "00"
        CidrPublicSubnet: !Ref CidrPublicSubnetA
        CidrPrivateSubnet: !Ref CidrPrivateSubnetA
        NetworkAclPublic: !Ref NetworkAclPublic
        NetworkAclPrivate: !Ref NetworkAclPrivate
        RouteTablePublic: !Ref RouteTablePublic
        RouteTablePrivate: !Ref RouteTablePrivate
        EnableIPv6: !Ref EnableIPv6
      Tags:
        - Key: Name
          Value: !Ref Tag
      TemplateURL:
        Fn::Join: [ '', [ 'https://s3-', !Ref "AWS::Region", '.amazonaws.com/',  !Ref S3TemplateBucket, '/templates/_subnets.yml' ] ]
  SubnetB:
    Condition: EnableSubnetB
    DependsOn: VPC
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        AZ: "B"
        CidrPublicIpv6: "02"
        Tag: !Ref Tag
        VPC: !Ref VPC
        VPCIpv6CidrBlocks:
          Fn::If:
            - ConfigureIPv6
            - !Select [0, !GetAtt [ VPC, Ipv6CidrBlocks ] ]
            - "00"
        CidrPublicSubnet: !Ref CidrPublicSubnetB
        CidrPrivateSubnet: !Ref CidrPrivateSubnetB
        NetworkAclPublic: !Ref NetworkAclPublic
        NetworkAclPrivate: !Ref NetworkAclPrivate
        RouteTablePublic: !Ref RouteTablePublic
        RouteTablePrivate: !Ref RouteTablePrivate
        EnableIPv6: !Ref EnableIPv6
      Tags:
        - Key: Name
          Value: !Ref Tag
      TemplateURL:
        Fn::Join: [ '', [ 'https://s3-', !Ref "AWS::Region", '.amazonaws.com/',  !Ref S3TemplateBucket, '/templates/_subnets.yml' ] ]
  SubnetC:
    Condition: EnableSubnetC
    DependsOn: VPC
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        AZ: "C"
        CidrPublicIpv6: "03"
        Tag: !Ref Tag
        VPC: !Ref VPC
        VPCIpv6CidrBlocks:
          Fn::If:
            - ConfigureIPv6
            - !Select [0, !GetAtt [ VPC, Ipv6CidrBlocks ] ]
            - "00"
        CidrPublicSubnet: !Ref CidrPublicSubnetC
        CidrPrivateSubnet: !Ref CidrPrivateSubnetC
        NetworkAclPublic: !Ref NetworkAclPublic
        NetworkAclPrivate: !Ref NetworkAclPrivate
        RouteTablePublic: !Ref RouteTablePublic
        RouteTablePrivate: !Ref RouteTablePrivate
        EnableIPv6: !Ref EnableIPv6
      Tags:
        - Key: Name
          Value: !Ref Tag
      TemplateURL:
        Fn::Join: [ '', [ 'https://s3-', !Ref "AWS::Region", '.amazonaws.com/',  !Ref S3TemplateBucket, '/templates/_subnets.yml' ] ]
  SubnetD:
    Condition: EnableSubnetD
    DependsOn: VPC
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        AZ: "D"
        CidrPublicIpv6: "04"
        Tag: !Ref Tag
        VPC: !Ref VPC
        VPCIpv6CidrBlocks:
          Fn::If:
            - ConfigureIPv6
            - !Select [0, !GetAtt [ VPC, Ipv6CidrBlocks ] ]
            - "00"
        CidrPublicSubnet: !Ref CidrPublicSubnetD
        CidrPrivateSubnet: !Ref CidrPrivateSubnetD
        NetworkAclPublic: !Ref NetworkAclPublic
        NetworkAclPrivate: !Ref NetworkAclPrivate
        RouteTablePublic: !Ref RouteTablePublic
        RouteTablePrivate: !Ref RouteTablePrivate
        EnableIPv6: !Ref EnableIPv6
      Tags:
        - Key: Name
          Value: !Ref Tag
      TemplateURL:
        Fn::Join: [ '', [ 'https://s3-', !Ref "AWS::Region", '.amazonaws.com/',  !Ref S3TemplateBucket, '/templates/_subnets_tmp.yml' ] ]
  SubnetE:
    Condition: EnableSubnetE
    DependsOn: VPC
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        AZ: "E"
        CidrPublicIpv6: "05"
        Tag: !Ref Tag
        VPC: !Ref VPC
        VPCIpv6CidrBlocks:
          Fn::If:
            - ConfigureIPv6
            - !Select [0, !GetAtt [ VPC, Ipv6CidrBlocks ] ]
            - "00"
        CidrPublicSubnet: !Ref CidrPublicSubnetE
        CidrPrivateSubnet: !Ref CidrPrivateSubnetE
        NetworkAclPublic: !Ref NetworkAclPublic
        NetworkAclPrivate: !Ref NetworkAclPrivate
        RouteTablePublic: !Ref RouteTablePublic
        RouteTablePrivate: !Ref RouteTablePrivate
        EnableIPv6: !Ref EnableIPv6
      Tags:
        - Key: Name
          Value: !Ref Tag
      TemplateURL:
        Fn::Join: [ '', [ 'https://s3-', !Ref "AWS::Region", '.amazonaws.com/',  !Ref S3TemplateBucket, '/templates/_subnets.yml' ] ]
  SubnetF:
    Condition: EnableSubnetF
    DependsOn: VPC
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        AZ: "F"
        CidrPublicIpv6: "06"
        Tag: !Ref Tag
        VPC: !Ref VPC
        VPCIpv6CidrBlocks:
          Fn::If:
            - ConfigureIPv6
            - !Select [0, !GetAtt [ VPC, Ipv6CidrBlocks ] ]
            - "00"
        CidrPublicSubnet: !Ref CidrPublicSubnetF
        CidrPrivateSubnet: !Ref CidrPrivateSubnetF
        NetworkAclPublic: !Ref NetworkAclPublic
        NetworkAclPrivate: !Ref NetworkAclPrivate
        RouteTablePublic: !Ref RouteTablePublic
        RouteTablePrivate: !Ref RouteTablePrivate
        EnableIPv6: !Ref EnableIPv6
      Tags:
        - Key: Name
          Value: !Ref Tag
      TemplateURL:
        Fn::Join: [ '', [ 'https://s3-', !Ref "AWS::Region", '.amazonaws.com/',  !Ref S3TemplateBucket, '/templates/_subnets.yml' ] ]
  SubnetG:
    Condition: EnableSubnetG
    DependsOn: VPC
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        AZ: "G"
        CidrPublicIpv6: "07"
        Tag: !Ref Tag
        VPC: !Ref VPC
        VPCIpv6CidrBlocks:
          Fn::If:
            - ConfigureIPv6
            - !Select [0, !GetAtt [ VPC, Ipv6CidrBlocks ] ]
            - "00"
        CidrPublicSubnet: !Ref CidrPublicSubnetG
        CidrPrivateSubnet: !Ref CidrPrivateSubnetG
        NetworkAclPublic: !Ref NetworkAclPublic
        NetworkAclPrivate: !Ref NetworkAclPrivate
        RouteTablePublic: !Ref RouteTablePublic
        RouteTablePrivate: !Ref RouteTablePrivate
        EnableIPv6: !Ref EnableIPv6
      Tags:
        - Key: Name
          Value: !Ref Tag
      TemplateURL:
        Fn::Join: [ '', [ 'https://s3-', !Ref "AWS::Region", '.amazonaws.com/',  !Ref S3TemplateBucket, '/templates/_subnets.yml' ] ]

Outputs:
  VPC:
    Description: VPC
    Value: !Ref 'VPC'
  PublicSubnetA:
    Condition: EnableSubnetA
    Description: 'Public Subnet A'
    Value: !GetAtt SubnetA.Outputs.PublicSubnet
    Export:
      Name: !Sub '${Tag}-PublicSubnetA'
  PrivateSubnetA:
    Condition: EnableSubnetA
    Description: 'Private Subnet A'
    Value: !GetAtt SubnetA.Outputs.PrivateSubnet
    Export:
      Name: !Sub '${Tag}-PrivateSubnetA'

  PublicSubnetB:
    Condition: EnableSubnetB
    Description: 'Public Subnet B'
    Value: !GetAtt SubnetA.Outputs.PublicSubnet
    Export:
      Name: !Sub '${Tag}-PublicSubnetB'
  PrivateSubnetB:
    Condition: EnableSubnetB
    Description: 'Private Subnet B'
    Value: !GetAtt SubnetA.Outputs.PrivateSubnet
    Export:
      Name: !Sub '${Tag}-PrivateSubnetB'

  PublicSubnetC:
    Condition: EnableSubnetC
    Description: 'Public Subnet C'
    Value: !GetAtt SubnetA.Outputs.PublicSubnet
    Export:
      Name: !Sub '${Tag}-PublicSubnetC'
  PrivateSubnetC:
    Condition: EnableSubnetC
    Description: 'Private Subnet C'
    Value: !GetAtt SubnetA.Outputs.PrivateSubnet
    Export:
      Name: !Sub '${Tag}-PrivateSubnetC'

  PublicSubnetD:
    Condition: EnableSubnetD
    Description: 'Public Subnet D'
    Value: !GetAtt SubnetA.Outputs.PublicSubnet
    Export:
      Name: !Sub '${Tag}-PublicSubnetD'
  PrivateSubnetD:
    Condition: EnableSubnetD
    Description: 'Private Subnet D'
    Value: !GetAtt SubnetA.Outputs.PrivateSubnet
    Export:
      Name: !Sub '${Tag}-PrivateSubnetD'

  PublicSubnetE:
    Condition: EnableSubnetE
    Description: 'Public Subnet E'
    Value: !GetAtt SubnetA.Outputs.PublicSubnet
    Export:
      Name: !Sub '${Tag}-PublicSubnetE'
  PrivateSubnetE:
    Condition: EnableSubnetE
    Description: 'Private Subnet E'
    Value: !GetAtt SubnetA.Outputs.PrivateSubnet
    Export:
      Name: !Sub '${Tag}-PrivateSubnetE'

  PublicSubnetF:
    Condition: EnableSubnetF
    Description: 'Public Subnet F'
    Value: !GetAtt SubnetA.Outputs.PublicSubnet
    Export:
      Name: !Sub '${Tag}-PublicSubnetF'
  PrivateSubnetF:
    Condition: EnableSubnetF
    Description: 'Private Subnet F'
    Value: !GetAtt SubnetA.Outputs.PrivateSubnet
    Export:
      Name: !Sub '${Tag}-PrivateSubnetF'

  PublicSubnetG:
    Condition: EnableSubnetG
    Description: 'Public Subnet G'
    Value: !GetAtt SubnetA.Outputs.PublicSubnet
    Export:
      Name: !Sub '${Tag}-PublicSubnetG'
  PrivateSubnetG:
    Condition: EnableSubnetG
    Description: 'Private Subnet G'
    Value: !GetAtt SubnetA.Outputs.PrivateSubnet
    Export:
      Name: !Sub '${Tag}-PrivateSubnetG'

  PrivateRouteTable:
    Description: "PrivateRouteTable"
    Value: !Ref RouteTablePrivate
    Export:
      Name: !Sub '${Tag}-PrivateRouteTable'
  PublicRouteTable:
    Description: "PublicRouteTable"
    Value: !Ref RouteTablePublic
    Export:
      Name: !Sub '${Tag}-PublicRouteTable'
  PublicNACL:
    Description: "PublicNACL"
    Value: !Ref NetworkAclPublic
    Export:
      Name: !Sub '${Tag}-PublicNetworkACL'
  PrivateNACL:
    Description: "PrivateNACL"
    Value: !Ref NetworkAclPrivate
    Export:
      Name: !Sub '${Tag}-PrivateNetworkACL'
